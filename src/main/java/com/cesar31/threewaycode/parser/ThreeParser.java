
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.threewaycode.parser;

import com.cesar31.threewaycode.instruction.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ThreeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ThreeParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ThreeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ThreeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ThreeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\007\004\000\002\002\004\000\002\007" +
    "\003\000\002\006\006\000\002\002\005\000\002\002\005" +
    "\000\002\002\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\004\004\001\002\000\004\015\011\001" +
    "\002\000\006\002\010\004\004\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\006\002\001\004\001\001\002\000" +
    "\004\002\000\001\002\000\012\004\013\005\012\007\016" +
    "\012\017\001\002\000\016\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\016\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\013\ufff4\014\ufff4\001\002\000\016\006" +
    "\ufffb\007\ufffb\010\030\011\027\013\ufffb\014\ufffb\001\002" +
    "\000\010\006\024\007\025\014\035\001\002\000\010\004" +
    "\013\005\012\012\017\001\002\000\012\004\013\005\012" +
    "\007\016\012\017\001\002\000\016\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\001\002\000\016\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\001\002\000" +
    "\010\006\024\007\025\013\023\001\002\000\016\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\001\002\000" +
    "\012\004\013\005\012\007\016\012\017\001\002\000\012" +
    "\004\013\005\012\007\016\012\017\001\002\000\016\006" +
    "\ufffc\007\ufffc\010\030\011\027\013\ufffc\014\ufffc\001\002" +
    "\000\012\004\013\005\012\007\016\012\017\001\002\000" +
    "\012\004\013\005\012\007\016\012\017\001\002\000\016" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\001" +
    "\002\000\016\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\001\002\000\016\006\ufffd\007\ufffd\010\030\011" +
    "\027\013\ufffd\014\ufffd\001\002\000\016\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\013\ufff7\014\ufff7\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\006\005\007\004\001\001\000\002\001" +
    "\001\000\004\006\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\014\003\013\004" +
    "\020\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\033\001" +
    "\001\000\012\002\021\003\013\004\020\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\032\004\020\005\017\001\001" +
    "\000\010\003\025\004\020\005\017\001\001\000\002\001" +
    "\001\000\006\004\031\005\017\001\001\000\006\004\030" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ThreeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ThreeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ThreeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public ThreeParser(ThreeLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
		// List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			// expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ThreeParser$actions {
  private final ThreeParser parser;

  /** Constructor */
  CUP$ThreeParser$actions(ThreeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ThreeParser$do_action_part00000000(
    int                        CUP$ThreeParser$act_num,
    java_cup.runtime.lr_parser CUP$ThreeParser$parser,
    java.util.Stack            CUP$ThreeParser$stack,
    int                        CUP$ThreeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ThreeParser$result;

      /* select the action based on the action number */
      switch (CUP$ThreeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= input assign 
            {
              List<Assignment> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = list; RESULT.add(a); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("input",5, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).right;
		List<Assignment> start_val = (List<Assignment>)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).value;
		RESULT = start_val;
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ThreeParser$parser.done_parsing();
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= assign 
            {
              List<Assignment> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("input",5, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assign ::= ID EQUAL a SEMI 
            {
              Assignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).value;
		 RESULT = new Assignment(id.toString(), operation); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("assign",4, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-3)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // a ::= a PLUS b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("plus", l, r); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // a ::= a MINUS b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("minus", l, r); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // a ::= b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b ::= b TIMES c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("times", l ,r); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b ::= b DIVIDE c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("divide", l, r); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b ::= c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c ::= MINUS d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("uminus", l); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c ::= d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // d ::= INTEGER 
            {
              Operation RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("integer", integer.toString()); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // d ::= ID 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.peek()).value;
		 RESULT = new Operation("id", id.toString()); 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // d ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-1)).value;
		 RESULT = op; 
              CUP$ThreeParser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.elementAt(CUP$ThreeParser$top-2)), ((java_cup.runtime.Symbol)CUP$ThreeParser$stack.peek()), RESULT);
            }
          return CUP$ThreeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ThreeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ThreeParser$do_action(
    int                        CUP$ThreeParser$act_num,
    java_cup.runtime.lr_parser CUP$ThreeParser$parser,
    java.util.Stack            CUP$ThreeParser$stack,
    int                        CUP$ThreeParser$top)
    throws java.lang.Exception
    {
              return CUP$ThreeParser$do_action_part00000000(
                               CUP$ThreeParser$act_num,
                               CUP$ThreeParser$parser,
                               CUP$ThreeParser$stack,
                               CUP$ThreeParser$top);
    }
}

}
